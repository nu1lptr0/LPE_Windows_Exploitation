#pragma once

// defining Struct
typedef struct _IO_STATUS_BLOCK {
	union {
		NTSTATUS Status;
		PVOID    Pointer;
	};
	ULONG_PTR Information;
} IO_STATUS_BLOCK, * PIO_STATUS_BLOCK;

typedef struct _UNICODE_STRING {
	USHORT Length;
	USHORT MaximumLength;
	PWSTR  Buffer;
} UNICODE_STRING, * PUNICODE_STRING;

typedef struct _OBJECT_ATTRIBUTES {
	ULONG           Length;
	HANDLE          RootDirectory;
	PUNICODE_STRING ObjectName;
	ULONG           Attributes;
	PVOID           SecurityDescriptor;
	PVOID           SecurityQualityOfService;
} OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;

//load Nt functions
typedef NTSTATUS(WINAPI* NtDeviceIoControlFile_t)(HANDLE FileHandle,
	HANDLE Event,
	VOID* ApcRoutine,
	PVOID ApcContext,
	IO_STATUS_BLOCK* IoStatusBlock,
	ULONG IoControlCode,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID OutputBuffer,
	ULONG OutputBufferLength);

typedef NTSTATUS(WINAPI* NtCreateFile_t)(PHANDLE FileHandle,
	ACCESS_MASK DesiredAccess,
	OBJECT_ATTRIBUTES* ObjectAttributes,
	IO_STATUS_BLOCK* IoStatusBlock,
	LARGE_INTEGER* AllocationSize,
	ULONG FileAttributes,
	ULONG ShareAccess,
	ULONG CreateDisposition,
	ULONG CreateOptions,
	PVOID EaBuffer,
	ULONG EaLength);

typedef NTSTATUS(WINAPI* NtCreateIoCompletion_t)(PHANDLE IoCompletionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG NumberOfConcurrentThreads);

typedef NTSTATUS(WINAPI* NtSetIoCompletion_t)(HANDLE IoCompletionHandle,
	ULONG CompletionKey,
	PIO_STATUS_BLOCK IoStatusBlock,
	NTSTATUS CompletionStatus,
	ULONG NumberOfBytesTransferred);

NtCreateFile_t NtCreateFile;
NtDeviceIoControlFile_t NtDeviceIoControlFile;
NtSetIoCompletion_t NtSetIoCompletion;
NtCreateIoCompletion_t NtCreateIoCompletion;

// IO Ring structs and functions

typedef enum _SYSTEM_INFORMATION_CLASS {
	SystemHandleInformation = 16
} SYSTEM_INFORMATION_CLASS;

typedef NTSTATUS(WINAPI* NtQuerySystemInformation_t)(SYSTEM_INFORMATION_CLASS SystemInformationClass, 
	PVOID SystemInformation, 
	ULONG SystemInformationLength, 
	PULONG ReturnLength);

NtQuerySystemInformation_t NtQuerySystemInformation;

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO
{
	/* 0x0000 */ unsigned short UniqueProcessId;
	/* 0x0002 */ unsigned short CreatorBackTraceIndex;
	/* 0x0004 */ unsigned char ObjectTypeIndex;
	/* 0x0005 */ unsigned char HandleAttributes;
	/* 0x0006 */ unsigned short HandleValue;
	/* 0x0008 */ void* Object;
	/* 0x0010 */ unsigned long GrantedAccess;
	/* 0x0014 */ long __PADDING__[1];
} SYSTEM_HANDLE_TABLE_ENTRY_INFO, * PSYSTEM_HANDLE_TABLE_ENTRY_INFO; /* size: 0x0018 */

typedef struct _SYSTEM_HANDLE_INFORMATION
{
	/* 0x0000 */ unsigned long NumberOfHandles;
	/* 0x0008 */ struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[1];
} SYSTEM_HANDLE_INFORMATION, * PSYSTEM_HANDLE_INFORMATION; /* size: 0x0020 */

typedef struct _DISPATCHER_HEADER
{
    union
    {
        volatile long Lock;
        long LockNV;
        struct
        {
            unsigned char Type;
            unsigned char Signalling;
            unsigned char Size;
            unsigned char Reserved1;
        };
        struct
        {
            unsigned char TimerType;
            union
            {
                unsigned char TimerControlFlags;
                struct
                {
                    struct
                    {
                        unsigned char Absolute : 1;
                        unsigned char Wake : 1;
                        unsigned char EncodedTolerableDelay : 6;
                    };
                    unsigned char Hand;
                    union
                    {
                        unsigned char TimerMiscFlags;
                        struct
                        {
                            unsigned char Index : 6;
                            unsigned char Inserted : 1;
                            volatile unsigned char Expired : 1;
                        };
                    };
                };
            };
        };
        struct
        {
            unsigned char Timer2Type;
            union
            {
                unsigned char Timer2Flags;
                struct
                {
                    struct
                    {
                        unsigned char Timer2Inserted : 1;
                        unsigned char Timer2Expiring : 1;
                        unsigned char Timer2CancelPending : 1;
                        unsigned char Timer2SetPending : 1;
                        unsigned char Timer2Running : 1;
                        unsigned char Timer2Disabled : 1;
                        unsigned char Timer2ReservedFlags : 2;
                    };
                    unsigned char Timer2ComponentId;
                    unsigned char Timer2RelativeId;
                };
            };
        };
        struct
        {
            unsigned char QueueType;
            union
            {
                unsigned char QueueControlFlags;
                struct
                {
                    struct
                    {
                        unsigned char Abandoned : 1;
                        unsigned char DisableIncrement : 1;
                        unsigned char QueueReservedControlFlags : 6;
                    };
                    unsigned char QueueSize;
                    unsigned char QueueReserved;
                };
            };
        };
        struct
        {
            unsigned char ThreadType;
            unsigned char ThreadReserved;
            union
            {
                unsigned char ThreadControlFlags;
                struct
                {
                    struct
                    {
                        unsigned char CycleProfiling : 1;
                        unsigned char CounterProfiling : 1;
                        unsigned char GroupScheduling : 1;
                        unsigned char AffinitySet : 1;
                        unsigned char Tagged : 1;
                        unsigned char EnergyProfiling : 1;
                        unsigned char SchedulerAssist : 1;
                        unsigned char ThreadReservedControlFlags : 1;
                    };
                    union
                    {
                        unsigned char DebugActive;
                        struct
                        {
                            unsigned char ActiveDR7 : 1;
                            unsigned char Instrumented : 1;
                            unsigned char Minimal : 1;
                            unsigned char Reserved4 : 2;
                            unsigned char AltSyscall : 1;
                            unsigned char Emulation : 1;
                            unsigned char Reserved5 : 1;
                        };
                    };
                };
            };
        };
        struct
        {
            unsigned char MutantType;
            unsigned char MutantSize;
            unsigned char DpcActive;
            unsigned char MutantReserved;
        };
    };
    long SignalState;
    LIST_ENTRY WaitListHead;
} DISPATCHER_HEADER, * PDISPATCHER_HEADER;

typedef struct _NT_IORING_CREATE_FLAGS
{
    enum _NT_IORING_CREATE_REQUIRED_FLAGS Required;
    enum _NT_IORING_CREATE_ADVISORY_FLAGS Advisory;
} NT_IORING_CREATE_FLAGS, * PNT_IORING_CREATE_FLAGS;


typedef struct _NT_IORING_INFO
{
	enum IORING_VERSION IoRingVersion;
	struct _NT_IORING_CREATE_FLAGS Flags;
	unsigned int SubmissionQueueSize;
	unsigned int SubmissionQueueRingMask;
	unsigned int CompletionQueueSize;
	unsigned int CompletionQueueRingMask;
	struct _NT_IORING_SUBMISSION_QUEUE* SubmissionQueue;
	struct _NT_IORING_COMPLETION_QUEUE* CompletionQueue;
} NT_IORING_INFO, * PNT_IORING_INFO;

typedef struct _KEVENT
{
	struct _DISPATCHER_HEADER Header;
} KEVENT, * PKEVENT;

typedef struct _IORING_OBJECT
{
	short Type;
	short Size;
	struct _NT_IORING_INFO UserInfo;
	void* Section;
	struct _NT_IORING_SUBMISSION_QUEUE* SubmissionQueue;
	struct _MDL* CompletionQueueMdl;
	struct _NT_IORING_COMPLETION_QUEUE* CompletionQueue;
	unsigned __int64 ViewSize;
	long InSubmit;
	unsigned __int64 CompletionLock;
	unsigned __int64 SubmitCount;
	unsigned __int64 CompletionCount;
	unsigned __int64 CompletionWaitUntil;
	struct _KEVENT CompletionEvent;
	unsigned char SignalCompletionEvent;
	struct _KEVENT* CompletionUserEvent;
	unsigned int RegBuffersCount;
	struct _IOP_MC_BUFFER_ENTRY** RegBuffers;
	unsigned int RegFilesCount;
	void** RegFiles;
} IORING_OBJECT, * PIORING_OBJECT;

typedef struct _IOP_MC_BUFFER_ENTRY
{
    USHORT Type;
    USHORT Reserved;
    ULONG Size;
    ULONG ReferenceCount;
    ULONG Flags;
    LIST_ENTRY GlobalDataLink;
    PVOID Address;
    ULONG Length;
    CHAR AccessMode;
    ULONG MdlRef;
    struct _MDL* Mdl;
    KEVENT MdlRundownEvent;
    PULONG64 PfnArray;
    BYTE PageNodes[0x20];
} IOP_MC_BUFFER_ENTRY, * PIOP_MC_BUFFER_ENTRY;

typedef struct _HIORING
{
    HANDLE handle;
    NT_IORING_INFO Info;
    ULONG IoRingKernelAcceptedVersion;
    PVOID RegBufferArray;
    ULONG BufferArraySize;
    PVOID Unknown;
    ULONG FileHandlesCount;
    ULONG SubQueueHead;
    ULONG SubQueueTail;
}_HIORING;